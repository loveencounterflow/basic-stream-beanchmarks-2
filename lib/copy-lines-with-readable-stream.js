// Generated by CoffeeScript 1.12.1
(function() {
  var $as_line, $as_text, $count, $decode, $filter_comments, $filter_empty, $pass, $select_fields, $show, $split, $split_fields, $trim, CND, FS, O, PATH, STREAM, badge, debug, echo, format_float, format_integer, help, i, idx, info, input_stream, item_count, mkdirp, new_numeral, output_stream, rpr, s, t0, t1, through2, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'BASIC-STREAM-BENCHMARKS-2/COPY-LINES-WITH-READABLE-STREAM';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  PATH = require('path');

  FS = require('fs');

  new_numeral = require('numeral');

  format_float = function(x) {
    return (new_numeral(x)).format('0,0.000');
  };

  format_integer = function(x) {
    return (new_numeral(x)).format('0,0');
  };

  O = require('./options');

  through2 = require('through2');

  $split = require('binary-split');

  mkdirp = require('mkdirp');

  STREAM = require('readable-stream');

  $show = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(chunk, _, done) {
      this.push(chunk);
      debug('11021', chunk);
      return done();
    };
    return R;
  };

  $pass = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(chunk, _, done) {
      this.push(chunk);
      return done();
    };
    return R;
  };

  $count = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(chunk, _, done) {
      this.push(chunk);
      item_count += +1;
      return done();
    };
    return R;
  };

  $decode = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(chunk, _, done) {
      this.push(chunk.toString());
      return done();
    };
    return R;
  };

  $trim = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(line, _, done) {
      this.push(line.trim());
      return done();
    };
    return R;
  };

  $filter_empty = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(line, _, done) {
      if (line.length !== 0) {
        this.push(line);
      }
      return done();
    };
    return R;
  };

  $filter_comments = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(line, _, done) {
      if (!line.startsWith('#')) {
        this.push(line);
      }
      return done();
    };
    return R;
  };

  $split_fields = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(line, _, done) {
      this.push(line.split('\t'));
      return done();
    };
    return R;
  };

  $select_fields = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(fields, _, done) {
      var formula, glyph;
      _ = fields[0], glyph = fields[1], formula = fields[2];
      this.push([glyph, formula]);
      return done();
    };
    return R;
  };

  $as_text = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(fields, _, done) {
      this.push(JSON.stringify(fields));
      return done();
    };
    return R;
  };

  $as_line = function() {
    var R;
    R = new STREAM.Transform({
      objectMode: true
    });
    R._transform = function(text, _, done) {
      this.push(text + '\n');
      return done();
    };
    return R;
  };

  mkdirp.sync(PATH.dirname(O.outputs.readablestream));

  input_stream = FS.createReadStream(O.inputs.ids);

  output_stream = FS.createWriteStream(O.outputs.readablestream);

  t0 = null;

  t1 = null;

  item_count = 0;

  input_stream.on('open', function() {
    t0 = Date.now();
    return help("input_stream: open");
  });

  output_stream.on('close', function() {
    var dts, dts_txt, ips, ips_txt, item_count_txt;
    t1 = Date.now();
    dts = (t1 - t0) / 1000;
    dts_txt = format_float(dts);
    item_count_txt = format_integer(item_count);
    ips = item_count / dts;
    ips_txt = format_float(ips);
    help("output_stream: close");
    help(item_count_txt + " items; dts: " + dts_txt + ", ips: " + ips_txt);
    return help('ok');
  });

  s = input_stream;

  s = s.pipe($split());

  s = s.pipe($decode());

  s = s.pipe($count());

  s = s.pipe($trim());

  s = s.pipe($filter_empty());

  s = s.pipe($filter_comments());

  s = s.pipe($split_fields());

  s = s.pipe($select_fields());

  s = s.pipe($as_text());

  s = s.pipe($as_line());

  for (idx = i = 1; i <= 100; idx = ++i) {
    s = s.pipe($pass());
  }

  s = s.pipe(output_stream);

}).call(this);

//# sourceMappingURL=copy-lines-with-readable-stream.js.map
